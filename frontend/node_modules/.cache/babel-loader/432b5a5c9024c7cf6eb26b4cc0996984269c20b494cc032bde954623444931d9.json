{"ast":null,"code":"import axios from 'axios';\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\nconst API_BASE = `${BACKEND_URL}/api`;\n\n// Configure axios defaults\naxios.defaults.baseURL = API_BASE;\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// API Service\nconst api = {\n  // Users\n  users: {\n    create: async (email, name) => {\n      const response = await axios.post('/users', {\n        email,\n        name\n      });\n      return response.data;\n    }\n  },\n  // Properties\n  properties: {\n    create: async (userId, propertyData) => {\n      const response = await axios.post(`/properties?user_id=${userId}`, propertyData);\n      return response.data;\n    },\n    getAll: async userId => {\n      const response = await axios.get(`/properties/${userId}`);\n      return response.data;\n    },\n    getById: async propertyId => {\n      // Note: Backend doesn't have this endpoint yet, we'll get from list\n      return null;\n    }\n  },\n  // Virtual Tours\n  tours: {\n    upload360: async (propertyId, file, sceneName = \"Main Room\") => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('scene_name', sceneName);\n      const response = await axios.post(`/properties/${propertyId}/upload-360`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    getPropertyTours: async propertyId => {\n      const response = await axios.get(`/properties/${propertyId}/tours`);\n      return response.data;\n    },\n    trackView: async tourId => {\n      const response = await axios.post(`/tours/${tourId}/view`);\n      return response.data;\n    },\n    getTourUrl: tourId => {\n      return `${BACKEND_URL}/tours/${tourId}/tour.html`;\n    }\n  },\n  // Viral Content\n  viralContent: {\n    generate: async propertyId => {\n      const response = await axios.post(`/properties/${propertyId}/viral-content`);\n      return response.data;\n    },\n    get: async propertyId => {\n      const response = await axios.get(`/properties/${propertyId}/viral-content`);\n      return response.data;\n    }\n  },\n  // Analytics\n  analytics: {\n    get: async propertyId => {\n      const response = await axios.get(`/properties/${propertyId}/analytics`);\n      return response.data;\n    }\n  },\n  // Dashboard\n  dashboard: {\n    get: async userId => {\n      const response = await axios.get(`/dashboard/${userId}`);\n      return response.data;\n    }\n  },\n  // Health Check\n  health: async () => {\n    const response = await axios.get('/health');\n    return response.data;\n  }\n};\n\n// Error handler\naxios.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  throw error;\n});\nexport default api;\nexport { BACKEND_URL, API_BASE };","map":{"version":3,"names":["axios","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","API_BASE","defaults","baseURL","headers","common","api","users","create","email","name","response","post","data","properties","userId","propertyData","getAll","get","getById","propertyId","tours","upload360","file","sceneName","formData","FormData","append","getPropertyTours","trackView","tourId","getTourUrl","viralContent","generate","analytics","dashboard","health","interceptors","use","error","_error$response","console","message"],"sources":["/data/data/com.termux/files/home/listingspark-ai/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\nconst API_BASE = `${BACKEND_URL}/api`;\n\n// Configure axios defaults\naxios.defaults.baseURL = API_BASE;\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// API Service\nconst api = {\n  // Users\n  users: {\n    create: async (email, name) => {\n      const response = await axios.post('/users', { email, name });\n      return response.data;\n    },\n  },\n\n  // Properties\n  properties: {\n    create: async (userId, propertyData) => {\n      const response = await axios.post(`/properties?user_id=${userId}`, propertyData);\n      return response.data;\n    },\n    \n    getAll: async (userId) => {\n      const response = await axios.get(`/properties/${userId}`);\n      return response.data;\n    },\n    \n    getById: async (propertyId) => {\n      // Note: Backend doesn't have this endpoint yet, we'll get from list\n      return null;\n    }\n  },\n\n  // Virtual Tours\n  tours: {\n    upload360: async (propertyId, file, sceneName = \"Main Room\") => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('scene_name', sceneName);\n      \n      const response = await axios.post(\n        `/properties/${propertyId}/upload-360`,\n        formData,\n        {\n          headers: { 'Content-Type': 'multipart/form-data' }\n        }\n      );\n      return response.data;\n    },\n    \n    getPropertyTours: async (propertyId) => {\n      const response = await axios.get(`/properties/${propertyId}/tours`);\n      return response.data;\n    },\n    \n    trackView: async (tourId) => {\n      const response = await axios.post(`/tours/${tourId}/view`);\n      return response.data;\n    },\n    \n    getTourUrl: (tourId) => {\n      return `${BACKEND_URL}/tours/${tourId}/tour.html`;\n    }\n  },\n\n  // Viral Content\n  viralContent: {\n    generate: async (propertyId) => {\n      const response = await axios.post(`/properties/${propertyId}/viral-content`);\n      return response.data;\n    },\n    \n    get: async (propertyId) => {\n      const response = await axios.get(`/properties/${propertyId}/viral-content`);\n      return response.data;\n    }\n  },\n\n  // Analytics\n  analytics: {\n    get: async (propertyId) => {\n      const response = await axios.get(`/properties/${propertyId}/analytics`);\n      return response.data;\n    }\n  },\n\n  // Dashboard\n  dashboard: {\n    get: async (userId) => {\n      const response = await axios.get(`/dashboard/${userId}`);\n      return response.data;\n    }\n  },\n\n  // Health Check\n  health: async () => {\n    const response = await axios.get('/health');\n    return response.data;\n  }\n};\n\n// Error handler\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    throw error;\n  }\n);\n\nexport default api;\nexport { BACKEND_URL, API_BASE };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}